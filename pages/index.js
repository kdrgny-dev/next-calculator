import { useReducer } from 'react'
import Head from 'next/head'
import DigitButtons from '../components/DigitButtons'
import OperationButtons from '../components/OperationButtons'

export const ACTIONS = {
  ADD_DIGIT: 'add-digit',
  CLEAR: 'clear',
  DELETE_DIGIT: 'delete-digit',
  CHOOSE_OPERATOR: 'choose-operator',
  EVALUATE: 'evaluate',
}

function reducer(state, {type, payload}) {
  switch (type) {
    
    case ACTIONS.ADD_DIGIT:
      if (payload.digit === '0' && state.currentOperand === '0') return state

      if (payload.digit === '.' && state.currentOperand.includes('.')) return state

      if (state.overwrite) {
        return {
          ...state,
          currentOperand: payload.digit,
          overwrite: false,
        }
      }

      return {
        ...state,
        currentOperand: `${state.currentOperand || ""}${payload.digit}`,
      }
    
    case ACTIONS.CHOOSE_OPERATOR:
      
      if (state.currentOperand == null && state.previousOperand == null) return state

      if (state.currentOperand == null) return {
        ...state,
        operation: payload.operation,
      }

      if (state.previousOperand == null) {
        return {
          ...state,
          previousOperand: state.currentOperand,
          currentOperand: null,
          operation: payload.operation,
        }
      }

      return {
        ...state,
        previousOperand: evaluate(state),
        currentOperand: null,
        operation: payload.operation,
      }
      
    case ACTIONS.CLEAR:
      return {
        ...state,
        currentOperand: "",
      }
    
    case ACTIONS.DELETE_DIGIT:
      if (state.currentOperand == null) return state

      if (state.currentOperand.length === 1) return {
        ...state,
        currentOperand: null,
      }

      if (state.overwrite) {
        return {
          ...state,
          currentOperand: null,
          overwrite: false,
        }
      }

      return {
        ...state,
        currentOperand: state.currentOperand.slice(0, -1),
      }
    
    case ACTIONS.EVALUATE:
      if (state.operation == null || state.currentOperand == null || state.previousOperand == null) return state
      
      return {
        ...state,
        overwrite: true,
        currentOperand: evaluate(state),
        previousOperand: null,
        operation: null,
      }
    
    default:
      return state
    
  }
}

function evaluate({ currentOperand, previousOperand, operation }) {
  const prev = parseFloat(previousOperand)
  const current = parseFloat(currentOperand)

  if (isNaN(prev) || isNaN(current)) return ""
  
  let computation = ""

  switch (operation) { 
    case '+':
      return computation =  prev + current
    case '-':
      return computation = prev - current
    case '*':
      return computation = prev * current
    case '/':
      return computation = prev / current
  }

  return computation.toString()
}

const INTEGER_FORMATTER = new Intl.NumberFormat('en-us', {
  maximumFractionDigits: 0,
})

function formatOperand(operand) {
  if (operand == null) return
  const [integer, decimal] = operand.toString().split('.')
  if (decimal == null) return INTEGER_FORMATTER.format(integer)
  return `${INTEGER_FORMATTER.format(integer)}.${decimal}`

}


export default function Home() {
  const [{ currentOperand, previousOperand, operation }, dispatch] = useReducer(reducer, {})


  return (
    <>
      <Head>
        <title>Calculator - NextJS - useReducer</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="calc-grid">
        <div className="output">
          <div className="output-previous-operand">{formatOperand(previousOperand)} <span className="font-bold">{operation}</span></div>
          <div className="output-current-operand">{formatOperand(currentOperand)}</div>
        </div>
        <button className='btn col-span-2 btn-ac' onClick={() => dispatch({type:ACTIONS.CLEAR})}>AC</button>
        <button className='btn btn-del' onClick={() => dispatch({ type: ACTIONS.DELETE_DIGIT })}>DEL</button>
        <OperationButtons dispatch={dispatch} operation={'/'} />
        <DigitButtons dispatch={dispatch} digit={'1'} />
        <DigitButtons dispatch={dispatch} digit={'2'} />
        <DigitButtons dispatch={dispatch} digit={'3'} />
        <OperationButtons dispatch={dispatch} operation={'*'} />
        <DigitButtons dispatch={dispatch} digit={'4'} />
        <DigitButtons dispatch={dispatch} digit={'5'} />
        <DigitButtons dispatch={dispatch} digit={'6'} />
        <OperationButtons dispatch={dispatch} operation={'+'} />
        <DigitButtons dispatch={dispatch} digit={'7'} />
        <DigitButtons dispatch={dispatch} digit={'8'} />
        <DigitButtons dispatch={dispatch} digit={'9'} />
        <OperationButtons dispatch={dispatch} operation={'-'} />
        <DigitButtons dispatch={dispatch} digit={'.'} className="rounded-bl" />
        <DigitButtons dispatch={dispatch} digit={'0'} />
        <button className='btn col-span-2 rounded-br btn-operator' onClick={() => dispatch({ type: ACTIONS.EVALUATE })}>=</button>
      </div>
    </>
  )
}
